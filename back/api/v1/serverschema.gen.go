// Package apigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package apigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    *float32 `json:"code,omitempty"`
	Message *string  `json:"message,omitempty"`
	Time    *float32 `json:"time,omitempty"`
	TraceId *string  `json:"traceId,omitempty"`
}

// Login defines model for Login.
type Login struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// SignIn defines model for SignIn.
type SignIn struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// SignedUser defines model for SignedUser.
type SignedUser struct {
	Id       openapi_types.UUID `json:"id"`
	Username string             `json:"username"`
}

// Token defines model for Token.
type Token struct {
	Token string `json:"token"`
}

// User defines model for User.
type User struct {
	Birthday string `json:"birthday"`
	Id       int    `json:"id"`
	Name     string `json:"name"`
}

// UserFilter defines model for UserFilter.
type UserFilter struct {
	Birthday string `json:"birthday"`
	Name     string `json:"name"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody = Login

// SignInJSONBody defines parameters for SignIn.
type SignInJSONBody = SignIn

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody = User

// FilterUsersJSONBody defines parameters for FilterUsers.
type FilterUsersJSONBody = UserFilter

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginJSONBody

// SignInJSONRequestBody defines body for SignIn for application/json ContentType.
type SignInJSONRequestBody = SignInJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserJSONBody

// FilterUsersJSONRequestBody defines body for FilterUsers for application/json ContentType.
type FilterUsersJSONRequestBody = FilterUsersJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login to page
	// (POST /login)
	Login(ctx echo.Context) error
	// Sign in
	// (POST /signin)
	SignIn(ctx echo.Context) error
	// Create new user
	// (POST /user)
	CreateUser(ctx echo.Context) error
	// Delete user
	// (DELETE /user/{id})
	DeleteUser(ctx echo.Context, id int) error
	// Get an user by its id
	// (GET /user/{id})
	GetUser(ctx echo.Context, id int) error
	// Update an user by its id
	// (PUT /user/{id})
	UpdateUser(ctx echo.Context, id int) error
	// Returns all users
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// Search users using filters
	// (POST /users)
	FilterUsers(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// SignIn converts echo context to params.
func (w *ServerInterfaceWrapper) SignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignIn(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// FilterUsers converts echo context to params.
func (w *ServerInterfaceWrapper) FilterUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FilterUsers(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.Login)
	router.POST(baseURL+"/signin", wrapper.SignIn)
	router.POST(baseURL+"/user", wrapper.CreateUser)
	router.DELETE(baseURL+"/user/:id", wrapper.DeleteUser)
	router.GET(baseURL+"/user/:id", wrapper.GetUser)
	router.PUT(baseURL+"/user/:id", wrapper.UpdateUser)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.FilterUsers)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYTW/jNhD9KwTbo2LRjhNbOnW3aRcpih663dMiWNDiyKIqkSpJJTUC/feCpPxNb9LW",
	"XufgQ2BFJmfezHszQ/oZZ7JupABhNE6fsc4KqKl7/EkpqexDo2QDynBwrzPJwH7C37RuKsDpiJAIm0UD",
	"OMWirWegcBfhGrSm8+2VuJJzLhA4w6s92igu5naP4fX2huHN7SRJkiRg3yiawT3btj+6vhkRqlne/5Gc",
	"kHw6ne4761Zv5KyEzFiTv1p0+wE3VOsnqXZc0dm7u+nky3QSCqTVoATdCQaXshBMwjAhr8Pzkc/FfQAQ",
	"1JRXu6bhh/6/QSbrEKZwGO+m5Zek/k38myhecNVFWMFfLVfAcPq5R7vhf8Pww4GogX3SENAe30E/HF2P",
	"b26vJqPp5PYquR5bonOpampwituWs9OFtbISWVShQP6Qf0KAPbN8vfYNi6SlScnKnJaayTKng5xKzYpc",
	"0sJ9FFTLASTyyT3LQjOZFyWVumBlXhX0RbjeawhmONMzrkzB6GKnvgghVyS5Go5Cid1hZ7hawoWBuS/b",
	"/cT/IgvxInzHZJ/uFbRD0fzMK3OsmP4j3peh2h1c5NIaZ6AzxRvDpcCpC0EjEKyRXBjrihvn2X2BI/wI",
	"SvulZDAcEAtTNiBow3GKrwdkcO3KzRQu6rhatTWpjf20OaHWmW2ffdfz8EGb95ItfJsXBoRbT5um4pnb",
	"EZdaivWcsE/fK8hxir+L14Mk7qdI7G13nU+PbqTQnooRIUdz4uvM+dhOpPOOjESmANTYYdRFeHxEz35C",
	"Bjy/pwz1+fQ+x6f3adWBhDQol61g1u3Ntwj1XhjbCCukQT2C6oe7XafbuqZqsUmEIyHChs61rRKvzAe7",
	"ONZ8Lr4m034YnkanvfGgUMf7FWqXIy6QbrMMtL7I6jyy6mnYEFQvIq+odjnYgnr6UQE14IbfHuXDo8Xn",
	"7B/KauYgsHPJ583w6KlAAp5Q6/lY8tm6ibemM37mrPP1WIGBfVbv3Pswq+PwqEXeFrtU8XnY95QdYj7C",
	"cwhU7wcwYZLJyUv3AxgP9qKXs+jF5p8KRwGaLRA3Gvl73p5yGqpoDcb+m37eLf37OyRzdzLslbd5b7EH",
	"EXeCXt46Un8DWR/xjWoh2gh396bTPUS4aQPK/dSwzblz/LPMUrfdqxtg6yBdGuCZBO0V8SpNL+egI/Rr",
	"jVH/387IDdT6dVJbXW2pUnRxqGVWXBtbcR7+W8r/72BaJTSiVdWjCzaT4CnS/9Swzvhpyrn/QSMQn/9m",
	"BXu7P3VvSQP+V43c4b2cefFHoCorPHGo1VzM+9yE1Oe2Olt+krWqwikujGnSOK5kRqtCapNOyZTEj8MY",
	"dw/dPwEAAP//g9+4NdgXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
